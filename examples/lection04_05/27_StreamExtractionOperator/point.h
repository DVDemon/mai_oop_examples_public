#ifndef POINT_H
#define POINT_H
#include <iostream>

// Класс Point (Точка) - демонстрирует перегрузку операторов потокового ввода и вывода
class Point
{
    // FRIEND ФУНКЦИИ для перегрузки потоковых операторов
    // ПЕРЕГРУЗКА ОПЕРАТОРА ПОТОКОВОГО ВЫВОДА (<<) как friend функции
    friend std::ostream& operator<<(std::ostream& os, const Point& p);
    
    // ПЕРЕГРУЗКА ОПЕРАТОРА ПОТОКОВОГО ВВОДА (>>) как friend функции
    // ВАЖНО: параметр Point НЕ const, так как мы изменяем объект при вводе
    friend std::istream& operator>>(std::istream& is, Point& p);

public:
    // Конструктор по умолчанию
    Point() = default;
    
    // Конструктор с параметрами - использует список инициализации
    Point(double x, double y)
        : m_x(x), m_y(y) {
    }
    
    // Деструктор
    ~Point() = default;

    // Метод для вывода информации о точке (альтернатива оператору <<)
    void print_info() {
        std::cout << "Point [ x: " << m_x << ", y: " << m_y << "]" << std::endl;
    }

    // ПРИМЕР ЗАКОММЕНТИРОВАННОГО КОДА - неправильный подход:
    // Операторы как методы класса (НЕ РЕКОМЕНДУЕТСЯ)
    /*
    std::ostream& operator<<(std::ostream& os) {
        os << "Point [ x: " << m_x << ", y: " << m_y << "]";
        return os;
    }
    // Проблемы этого подхода:
    // 1. Неестественный синтаксис: point << cout (вместо cout << point)
    // 2. Невозможность цепочки операторов
    // 3. Несовместимость с идиомами C++
    */

private:
    // Приватный метод для вычисления расстояния от начала координат
    double length() const;  // Функция для вычисления расстояния от точки (0,0)

private:
    // Приватные поля для координат точки
    double m_x{};  // Координата X
    double m_y{};  // Координата Y
};

// РЕАЛИЗАЦИЯ ПЕРЕГРУЖЕННОГО ОПЕРАТОРА ПОТОКОВОГО ВЫВОДА (<<)
// ВАЖНО: это friend функция - имеет доступ к приватным членам класса
// inline для оптимизации - функция определена в заголовочном файле
inline std::ostream& operator<<(std::ostream& os, const Point& p) {
    // FRIEND функция имеет прямой доступ к приватным полям p.m_x и p.m_y
    os << "Point [ x: " << p.m_x << ", y: " << p.m_y << "]";
    
    // ВАЖНО: возвращаем ссылку на поток для возможности цепочки операторов
    return os;
}

// РЕАЛИЗАЦИЯ ПЕРЕГРУЖЕННОГО ОПЕРАТОРА ПОТОКОВОГО ВВОДА (>>)
// ВАЖНО: это friend функция - имеет доступ к приватным членам класса
// inline для оптимизации - функция определена в заголовочном файле
inline std::istream& operator>>(std::istream& is, Point& p) {
    // Локальные переменные для чтения координат
    double x_coordinate;
    double y_coordinate;

    // Вывод подсказки пользователю о формате ввода
    std::cout << "Please type in the coordinates for the point" << std::endl;
    std::cout << "order [x,y], separated by spaces: ";

    // Чтение координат из потока ввода
    // ВАЖНО: оператор >> автоматически пропускает пробелы и разделители
    is >> x_coordinate >> y_coordinate;
    
    // Присваивание считанных значений приватным полям объекта
    // FRIEND функция имеет прямой доступ к приватным полям p.m_x и p.m_y
    p.m_x = x_coordinate;
    p.m_y = y_coordinate;

    // ВАЖНО: возвращаем ссылку на поток для возможности цепочки операторов
    return is;
}

#endif // POINT_H
