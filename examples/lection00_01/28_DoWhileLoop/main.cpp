/*
 * ЦИКЛ DO-WHILE В C++
 * 
 * Этот файл демонстрирует использование цикла do-while:
 * - Основы синтаксиса цикла do-while
 * - Ключевое отличие от цикла while
 * - Гарантированное выполнение хотя бы один раз
 * - Практические примеры и рекомендации
 */

#include <iostream>  // Для потоков ввода-вывода

int main() {
    /*
     * ПОДГОТОВКА ПЕРЕМЕННЫХ ДЛЯ ЦИКЛА DO-WHILE
     * 
     * Цикл do-while требует явного объявления переменных
     * для условия и управления циклом
     */
    const int ITERATION_COUNT{5};  // Константа для количества итераций
    size_t counter{0};             // Счетчик итераций (инициализация)
    
    std::cout << "=== ЦИКЛ DO-WHILE В C++ ===" << std::endl;
    std::cout << "Демонстрация цикла do-while с гарантированным выполнением" << std::endl;
    std::cout << std::endl;

    /*
     * ОСНОВНОЙ ЦИКЛ DO-WHILE
     * 
     * Синтаксис: do { тело_цикла } while (условие);
     * 
     * КЛЮЧЕВОЕ ОТЛИЧИЕ от while:
     * - Тело цикла выполняется ПЕРЕД проверкой условия
     * - Гарантированное выполнение хотя бы один раз
     * - Условие проверяется ПОСЛЕ каждой итерации
     * - Точка с запятой обязательна после while
     */
    std::cout << "=== ОСНОВНОЙ ЦИКЛ DO-WHILE ===" << std::endl;
    std::cout << "Выполняем цикл do-while (гарантированно выполнится хотя бы раз):" << std::endl;
    
    do {
        std::cout << "Итерация " << counter << ": Изучаем C++" << std::endl;
        ++counter;  // Обновление счетчика
    } while (counter < ITERATION_COUNT);  // Проверка условия ПОСЛЕ выполнения тела
    
    std::cout << "Цикл завершен!" << std::endl;
    std::cout << std::endl;

    /*
     * ПРИМЕР 2: ДЕМОНСТРАЦИЯ ГАРАНТИРОВАННОГО ВЫПОЛНЕНИЯ
     * 
     * Показываем, что do-while выполнится хотя бы один раз,
     * даже если условие изначально ложно
     */
    std::cout << "=== ПРИМЕР 2: ГАРАНТИРОВАННОЕ ВЫПОЛНЕНИЕ ===" << std::endl;
    std::cout << "Демонстрация: цикл выполнится хотя бы раз, даже при ложном условии:" << std::endl;
    
    int demo_counter = 10;  // Начинаем с 10
    const int max_count = 5;  // Но условие проверяет < 5
    
    do {
        std::cout << "Демо-итерация: " << demo_counter << " (условие: " << demo_counter << " < " << max_count << ")" << std::endl;
        ++demo_counter;
    } while (demo_counter < max_count);  // Условие ложно с самого начала!
    
    std::cout << "Цикл выполнился один раз, несмотря на ложное условие!" << std::endl;
    std::cout << std::endl;

    /*
     * ПРИМЕР 3: МЕНЮ С ПОЛЬЗОВАТЕЛЬСКИМ ВВОДОМ
     * 
     * Классический пример использования do-while - меню,
     * которое должно показаться хотя бы один раз
     */
    std::cout << "=== ПРИМЕР 3: МЕНЮ С ПОЛЬЗОВАТЕЛЬСКИМ ВВОДОМ ===" << std::endl;
    std::cout << "Симуляция меню (введите 0 для выхода):" << std::endl;
    
    int menu_choice;
    int menu_iterations = 0;
    
    do {
        std::cout << "\n=== МЕНЮ ===" << std::endl;
        std::cout << "1. Опция 1" << std::endl;
        std::cout << "2. Опция 2" << std::endl;
        std::cout << "3. Опция 3" << std::endl;
        std::cout << "0. Выход" << std::endl;
        std::cout << "Выберите опцию: ";
        
        // Симуляция ввода (в реальной программе здесь был бы std::cin)
        menu_choice = (menu_iterations < 2) ? (menu_iterations + 1) : 0;
        std::cout << menu_choice << std::endl;
        
        switch (menu_choice) {
            case 1:
                std::cout << "Выполняется опция 1" << std::endl;
                break;
            case 2:
                std::cout << "Выполняется опция 2" << std::endl;
                break;
            case 3:
                std::cout << "Выполняется опция 3" << std::endl;
                break;
            case 0:
                std::cout << "Выход из программы" << std::endl;
                break;
            default:
                std::cout << "Неверный выбор!" << std::endl;
        }
        
        ++menu_iterations;
    } while (menu_choice != 0);
    
    std::cout << "Меню завершено!" << std::endl;
    std::cout << std::endl;

    /*
     * ПРИМЕР 4: ВАЛИДАЦИЯ ВВОДА
     * 
     * Демонстрация использования do-while для валидации пользовательского ввода
     */
    std::cout << "=== ПРИМЕР 4: ВАЛИДАЦИЯ ВВОДА ===" << std::endl;
    std::cout << "Введите число от 1 до 10:" << std::endl;
    
    int user_number;
    int validation_attempts = 0;
    
    do {
        std::cout << "Попытка " << (validation_attempts + 1) << ": ";
        
        // Симуляция ввода (в реальной программе здесь был бы std::cin)
        user_number = (validation_attempts < 2) ? 15 : 7;  // Сначала неверное, потом верное
        std::cout << user_number << std::endl;
        
        if (user_number < 1 || user_number > 10) {
            std::cout << "Ошибка! Число должно быть от 1 до 10." << std::endl;
        }
        
        ++validation_attempts;
    } while ((user_number < 1 || user_number > 10) && validation_attempts < 5);
    
    if (user_number >= 1 && user_number <= 10) {
        std::cout << "Отлично! Вы ввели: " << user_number << std::endl;
    } else {
        std::cout << "Превышено количество попыток!" << std::endl;
    }
    std::cout << std::endl;

    /*
     * ПРИМЕР 5: СРАВНЕНИЕ WHILE И DO-WHILE
     * 
     * Демонстрация ключевого различия между while и do-while
     */
    std::cout << "=== ПРИМЕР 5: СРАВНЕНИЕ WHILE И DO-WHILE ===" << std::endl;
    
    int test_value = 10;
    const int limit = 5;
    
    std::cout << "Начальное значение: " << test_value << ", лимит: " << limit << std::endl;
    std::cout << std::endl;
    
    // Цикл while - может не выполниться ни разу
    std::cout << "Цикл WHILE (условие проверяется ДО выполнения):" << std::endl;
    int while_counter = test_value;
    while (while_counter < limit) {
        std::cout << "  while: " << while_counter << std::endl;
        ++while_counter;
    }
    std::cout << "while завершен (возможно, не выполнился ни разу)" << std::endl;
    std::cout << std::endl;
    
    // Цикл do-while - выполнится хотя бы один раз
    std::cout << "Цикл DO-WHILE (условие проверяется ПОСЛЕ выполнения):" << std::endl;
    int dowhile_counter = test_value;
    do {
        std::cout << "  do-while: " << dowhile_counter << std::endl;
        ++dowhile_counter;
    } while (dowhile_counter < limit);
    std::cout << "do-while завершен (выполнился хотя бы один раз)" << std::endl;
    std::cout << std::endl;

    /*
     * ПРИМЕР 6: ОБРАТНЫЙ ОТСЧЕТ С DO-WHILE
     * 
     * Демонстрация обратного отсчета с использованием do-while
     */
    std::cout << "=== ПРИМЕР 6: ОБРАТНЫЙ ОТСЧЕТ ===" << std::endl;
    std::cout << "Обратный отсчет с do-while:" << std::endl;
    
    int countdown = 3;
    do {
        std::cout << "Обратный отсчет: " << countdown << std::endl;
        --countdown;
    } while (countdown > 0);
    
    std::cout << "Старт!" << std::endl;
    std::cout << std::endl;

    /*
     * РЕКОМЕНДАЦИИ ПО ИСПОЛЬЗОВАНИЮ ЦИКЛА DO-WHILE
     * 
     * Практические советы для эффективного использования
     */
    std::cout << "=== РЕКОМЕНДАЦИИ ===" << std::endl;
    std::cout << "1. Используйте do-while когда нужно выполнить код хотя бы один раз" << std::endl;
    std::cout << "2. Идеально подходит для меню и валидации ввода" << std::endl;
    std::cout << "3. Не забывайте точку с запятой после while" << std::endl;
    std::cout << "4. Условие проверяется ПОСЛЕ выполнения тела цикла" << std::endl;
    std::cout << "5. Предпочитайте while для циклов, которые могут не выполниться" << std::endl;
    std::cout << "6. Используйте осмысленные имена для переменных цикла" << std::endl;
    std::cout << "7. Избегайте бесконечных циклов без условия выхода" << std::endl;
    std::cout << std::endl;
    
    return 0;
}

/*
 * РЕЗЮМЕ: ЦИКЛ DO-WHILE В C++
 * 
 * 1. ОСНОВНЫЕ ПОНЯТИЯ:
 *    - Цикл do-while выполняет тело, затем проверяет условие
 *    - Синтаксис: do { тело } while (условие);
 *    - Гарантированное выполнение хотя бы один раз
 * 
 * 2. СИНТАКСИС:
 *    - do { тело } while (условие);
 *    - Точка с запятой обязательна после while
 *    - Требует явного управления переменными цикла
 * 
 * 3. ОСОБЕННОСТИ:
 *    - Тело выполняется ПЕРЕД проверкой условия
 *    - Гарантированное выполнение хотя бы один раз
 *    - Условие проверяется ПОСЛЕ каждой итерации
 *    - Подходит для случаев, когда код должен выполниться обязательно
 * 
 * 4. ПРАКТИЧЕСКИЕ ПРИМЕНЕНИЯ:
 *    - Меню и пользовательские интерфейсы
 *    - Валидация пользовательского ввода
 *    - Инициализация и настройка
 *    - Обработка данных, которые должны быть обработаны хотя бы раз
 *    - Обратный отсчет
 * 
 * 5. ПРЕИМУЩЕСТВА:
 *    - Гарантированное выполнение хотя бы один раз
 *    - Идеально для меню и валидации
 *    - Простой синтаксис
 *    - Естественен для интерактивных программ
 * 
 * 6. НЕДОСТАТКИ:
 *    - Может выполниться лишний раз
 *    - Требует явного управления переменными
 *    - Риск бесконечных циклов
 *    - Сложнее отлаживать
 * 
 * 7. РЕКОМЕНДАЦИИ:
 *    - Используйте для кода, который должен выполниться хотя бы раз
 *    - Идеально для меню и валидации ввода
 *    - Не забывайте точку с запятой
 *    - Предпочитайте while для условных циклов
 *    - Используйте осмысленные имена переменных
 * 
 * 8. ВАЖНЫЕ ЗАМЕЧАНИЯ:
 *    - Условие проверяется ПОСЛЕ итерации
 *    - Гарантированное выполнение хотя бы один раз
 *    - Точка с запятой обязательна
 *    - Переменные должны изменяться в теле цикла
 * 
 * 9. АЛЬТЕРНАТИВЫ:
 *    - Цикл while для условных циклов
 *    - Цикл for для известного количества итераций
 *    - Рекурсия для некоторых случаев
 *    - Функции для повторяющейся логики
 * 
 * 10. ДОПОЛНИТЕЛЬНЫЕ ВОЗМОЖНОСТИ:
 *     - break для принудительного выхода
 *     - continue для пропуска итерации
 *     - Вложенные циклы do-while
 *     - Комбинирование с другими конструкциями
 */