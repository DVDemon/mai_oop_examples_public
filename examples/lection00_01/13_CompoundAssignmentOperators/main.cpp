/*
 * СОСТАВНЫЕ ОПЕРАТОРЫ ПРИСВАИВАНИЯ В C++
 * 
 * Этот файл демонстрирует составные операторы присваивания:
 * - Операторы +=, -=, *=, /=, %=
 * - Сравнение с обычными арифметическими операциями
 * - Преимущества составных операторов
 * - Применение для различных типов данных
 * - Связь с операциями инкремента и декремента
 */

#include <iostream>  // Для потоков ввода-вывода

int main(){
    /*
     * ИНИЦИАЛИЗАЦИЯ И ДЕМОНСТРАЦИЯ ОБЫЧНОГО ПРИСВАИВАНИЯ
     * 
     * Начнем с обычного способа изменения значения переменной
     * для сравнения с составными операторами
     */
    std::cout << "=== СОСТАВНЫЕ ОПЕРАТОРЫ ПРИСВАИВАНИЯ ===" << std::endl;
    
    int number {45};  // Инициализируем число значением 45
    
    std::cout << "Исходное значение: " << number << std::endl;
    std::cout << std::endl;

    /*
     * ОПЕРАТОР СЛОЖЕНИЯ С ПРИСВАИВАНИЕМ (+=)
     * 
     * value += 5 эквивалентно value = value + 5
     * Более компактная и читаемая запись
     */
    std::cout << "=== ОПЕРАТОР += (СЛОЖЕНИЕ С ПРИСВАИВАНИЕМ) ===" << std::endl;
    
    // Обычный способ
    number = number + 5;
    std::cout << "После number = number + 5: " << number << std::endl;
    
    // Составной оператор (закомментирован для демонстрации)
    // number += 5;  // Эквивалентно number = number + 5
    std::cout << "Составной оператор: number += 5 (эквивалентно number = number + 5)" << std::endl;
    std::cout << std::endl;

    /*
     * ОПЕРАТОР ВЫЧИТАНИЯ С ПРИСВАИВАНИЕМ (-=)
     * 
     * value -= 5 эквивалентно value = value - 5
     */
    std::cout << "=== ОПЕРАТОР -= (ВЫЧИТАНИЕ С ПРИСВАИВАНИЕМ) ===" << std::endl;
    
    number -= 5;  // Эквивалентно number = number - 5
    std::cout << "После number -= 5: " << number << std::endl;
    std::cout << std::endl;

    /*
     * ОПЕРАТОР УМНОЖЕНИЯ С ПРИСВАИВАНИЕМ (*=)
     * 
     * value *= 2 эквивалентно value = value * 2
     */
    std::cout << "=== ОПЕРАТОР *= (УМНОЖЕНИЕ С ПРИСВАИВАНИЕМ) ===" << std::endl;
    
    number *= 2;  // Эквивалентно number = number * 2
    std::cout << "После number *= 2: " << number << std::endl;
    std::cout << std::endl;

    /*
     * ОПЕРАТОР ДЕЛЕНИЯ С ПРИСВАИВАНИЕМ (/=)
     * 
     * value /= 3 эквивалентно value = value / 3
     * ВАЖНО: При делении целых чисел результат округляется вниз
     */
    std::cout << "=== ОПЕРАТОР /= (ДЕЛЕНИЕ С ПРИСВАИВАНИЕМ) ===" << std::endl;
    
    number /= 3;  // Эквивалентно number = number / 3
    std::cout << "После number /= 3: " << number << std::endl;
    std::cout << "Примечание: 90 / 3 = 30 (целочисленное деление)" << std::endl;
    std::cout << std::endl;

    /*
     * ОПЕРАТОР ОСТАТКА ОТ ДЕЛЕНИЯ С ПРИСВАИВАНИЕМ (%=)
     * 
     * value %= 11 эквивалентно value = value % 11
     * Возвращает остаток от деления
     */
    std::cout << "=== ОПЕРАТОР %= (ОСТАТОК ОТ ДЕЛЕНИЯ С ПРИСВАИВАНИЕМ) ===" << std::endl;
    
    number %= 11;  // Эквивалентно number = number % 11
    std::cout << "После number %= 11: " << number << std::endl;
    std::cout << "Примечание: 30 % 11 = 8 (остаток от деления)" << std::endl;
    std::cout << std::endl;

    /*
     * ДОПОЛНИТЕЛЬНЫЕ ПРИМЕРЫ С РАЗЛИЧНЫМИ ТИПАМИ
     */
    std::cout << "=== ДОПОЛНИТЕЛЬНЫЕ ПРИМЕРЫ ===" << std::endl;
    
    // Работа с вещественными числами
    double price {99.99};
    std::cout << "Исходная цена: " << price << std::endl;
    
    price *= 1.1;  // Увеличение на 10%
    std::cout << "Цена после увеличения на 10%: " << price << std::endl;
    
    price /= 2;    // Скидка 50%
    std::cout << "Цена со скидкой 50%: " << price << std::endl;
    
    // Работа с символами
    char letter {'A'};
    std::cout << "Исходная буква: " << letter << std::endl;
    
    letter += 1;   // Следующая буква в алфавите
    std::cout << "Следующая буква: " << letter << std::endl;

    return 0;
}

/*
 * РЕЗЮМЕ: СОСТАВНЫЕ ОПЕРАТОРЫ ПРИСВАИВАНИЯ
 * 
 * 1. ОСНОВНЫЕ ОПЕРАТОРЫ:
 *    - += (сложение с присваиванием)
 *    - -= (вычитание с присваиванием)
 *    - *= (умножение с присваиванием)
 *    - /= (деление с присваиванием)
 *    - %= (остаток от деления с присваиванием)
 * 
 * 2. ЭКВИВАЛЕНТНОСТЬ:
 *    - value += 5;  эквивалентно value = value + 5;
 *    - value -= 3;  эквивалентно value = value - 3;
 *    - value *= 2;  эквивалентно value = value * 2;
 *    - value /= 4;  эквивалентно value = value / 4;
 *    - value %= 7;  эквивалентно value = value % 7;
 * 
 * 3. ПРЕИМУЩЕСТВА:
 *    - Более компактная запись
 *    - Лучшая читаемость кода
 *    - Меньше повторений имени переменной
 *    - Более эффективны (компилятор может оптимизировать)
 * 
 * 4. ПРИМЕНЕНИЕ:
 *    - Математические вычисления
 *    - Обновление счетчиков
 *    - Изменение координат
 *    - Работа с индексами массивов
 *    - Финансовые расчеты
 * 
 * 5. СВЯЗЬ С ДРУГИМИ ОПЕРАЦИЯМИ:
 *    - ++value эквивалентно value += 1
 *    - --value эквивалентно value -= 1
 *    - value++ эквивалентно value += 1 (но с другим порядком)
 *    - value-- эквивалентно value -= 1 (но с другим порядком)
 * 
 * 6. ВАЖНЫЕ ЗАМЕЧАНИЯ:
 *    - Работают со всеми арифметическими типами
 *    - При делении целых чисел результат округляется вниз
 *    - Оператор %= работает только с целыми числами
 *    - Порядок выполнения: сначала операция, затем присваивание
 * 
 * 7. ПРАКТИЧЕСКИЕ СОВЕТЫ:
 *    - Используйте составные операторы для улучшения читаемости
 *    - Будьте осторожны с делением целых чисел
 *    - Помните о приоритете операций
 *    - Используйте скобки при сложных выражениях
 * 
 * 8. СВЯЗЬ С ПРЕДЫДУЩИМИ ТЕМАМИ:
 *    - Работают со всеми изученными типами (int, double, char)
 *    - Можно использовать с auto: auto result = number += 5;
 *    - sizeof() не изменяется при использовании этих операций
 *    - Операции изменяют значение переменной (побочный эффект)
 */