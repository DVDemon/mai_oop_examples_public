/*
 * ЯВНЫЕ ПРЕОБРАЗОВАНИЯ ТИПОВ ДАННЫХ В C++
 * 
 * Этот файл демонстрирует явные (принудительные) преобразования типов:
 * - static_cast для безопасных преобразований
 * - Различие между неявными и явными преобразованиями
 * - Порядок выполнения операций при преобразованиях
 * - Сравнение с устаревшими C-style приведениями
 * - Практические рекомендации по использованию
 */

#include <iostream>  // Для потоков ввода-вывода

int main() {
    /*
     * НЕЯВНОЕ ПРЕОБРАЗОВАНИЕ (ДЛЯ СРАВНЕНИЯ)
     * 
     * Неявное преобразование происходит автоматически:
     * 1. Выполняется сложение double + double = double
     * 2. Результат автоматически преобразуется в int при присваивании
     * 3. Дробная часть отбрасывается
     */
    double first_number {12.5};   // Первое вещественное число
    double second_number {34.6};  // Второе вещественное число
    
    int implicit_sum = first_number + second_number;  // Неявное преобразование
    
    std::cout << "=== НЕЯВНОЕ ПРЕОБРАЗОВАНИЕ ===" << std::endl;
    std::cout << "Первое число: " << first_number << std::endl;
    std::cout << "Второе число: " << second_number << std::endl;
    std::cout << "Сумма (неявное преобразование): " << implicit_sum << std::endl;
    std::cout << "Порядок: (12.5 + 34.6) = 47.1 → int = 47" << std::endl;
    std::cout << std::endl;

    /*
     * ЯВНОЕ ПРЕОБРАЗОВАНИЕ: ПРЕОБРАЗОВАНИЕ ЗАТЕМ СЛОЖЕНИЕ
     * 
     * static_cast<int>(x) + static_cast<int>(y):
     * 1. Сначала каждое число преобразуется в int
     * 2. Затем выполняется сложение int + int = int
     * 3. Результат уже имеет тип int
     */
    int explicit_sum_1 = static_cast<int>(first_number) + static_cast<int>(second_number);
    
    std::cout << "=== ЯВНОЕ ПРЕОБРАЗОВАНИЕ: ПРЕОБРАЗОВАНИЕ ЗАТЕМ СЛОЖЕНИЕ ===" << std::endl;
    std::cout << "static_cast<int>(12.5) = " << static_cast<int>(first_number) << std::endl;
    std::cout << "static_cast<int>(34.6) = " << static_cast<int>(second_number) << std::endl;
    std::cout << "Сумма (преобразование затем сложение): " << explicit_sum_1 << std::endl;
    std::cout << "Порядок: int(12.5) + int(34.6) = 12 + 34 = 46" << std::endl;
    std::cout << std::endl;

    /*
     * ЯВНОЕ ПРЕОБРАЗОВАНИЕ: СЛОЖЕНИЕ ЗАТЕМ ПРЕОБРАЗОВАНИЕ
     * 
     * static_cast<int>(x + y):
     * 1. Сначала выполняется сложение double + double = double
     * 2. Затем результат преобразуется в int
     * 3. Аналогично неявному преобразованию
     */
    int explicit_sum_2 = static_cast<int>(first_number + second_number);
    
    std::cout << "=== ЯВНОЕ ПРЕОБРАЗОВАНИЕ: СЛОЖЕНИЕ ЗАТЕМ ПРЕОБРАЗОВАНИЕ ===" << std::endl;
    std::cout << "Сумма (сложение затем преобразование): " << explicit_sum_2 << std::endl;
    std::cout << "Порядок: (12.5 + 34.6) = 47.1 → int(47.1) = 47" << std::endl;
    std::cout << std::endl;

    /*
     * СРАВНЕНИЕ РЕЗУЛЬТАТОВ
     * 
     * Демонстрация различий в результатах в зависимости от порядка операций
     */
    std::cout << "=== СРАВНЕНИЕ РЕЗУЛЬТАТОВ ===" << std::endl;
    std::cout << "Неявное преобразование: " << implicit_sum << std::endl;
    std::cout << "Явное (преобразование затем сложение): " << explicit_sum_1 << std::endl;
    std::cout << "Явное (сложение затем преобразование): " << explicit_sum_2 << std::endl;
    std::cout << "ВНИМАНИЕ: Результаты могут отличаться!" << std::endl;
    std::cout << std::endl;

    /*
     * ПРАКТИЧЕСКИЙ ПРИМЕР: ПРЕОБРАЗОВАНИЕ МАТЕМАТИЧЕСКИХ КОНСТАНТ
     * 
     * Демонстрация использования static_cast для преобразования
     * вещественных констант в целые числа
     */
    std::cout << "=== ПРАКТИЧЕСКИЙ ПРИМЕР: ПРЕОБРАЗОВАНИЕ КОНСТАНТ ===" << std::endl;
    
    double pi_value {3.14159};  // Значение π с высокой точностью
    
    /*
     * СОВРЕМЕННЫЙ ПОДХОД: static_cast
     * 
     * static_cast - это современный, безопасный способ явного преобразования типов.
     * Он обеспечивает лучшую читаемость и безопасность по сравнению с C-style приведениями.
     */
    int pi_as_integer = static_cast<int>(pi_value);
    
    std::cout << "Исходное значение π: " << pi_value << std::endl;
    std::cout << "π как целое число (static_cast): " << pi_as_integer << std::endl;
    std::cout << "Потеря точности: " << (pi_value - pi_as_integer) << std::endl;
    std::cout << std::endl;

    /*
     * УСТАРЕВШИЙ ПОДХОД: C-STYLE ПРИВЕДЕНИЯ (НЕ РЕКОМЕНДУЕТСЯ)
     * 
     * C-style приведения типа (int)value устарели и не рекомендуются в C++.
     * Они менее безопасны и могут скрывать ошибки.
     */
    std::cout << "=== УСТАРЕВШИЙ ПОДХОД: C-STYLE ПРИВЕДЕНИЯ ===" << std::endl;
    
    // Этот код закомментирован, так как C-style приведения не рекомендуются
    // int pi_c_style = (int)(pi_value);  // НЕ РЕКОМЕНДУЕТСЯ!
    
    std::cout << "C-style приведения (int)(value) НЕ РЕКОМЕНДУЮТСЯ в C++!" << std::endl;
    std::cout << "Используйте static_cast для явных преобразований" << std::endl;
    std::cout << std::endl;

    /*
     * ДОПОЛНИТЕЛЬНЫЕ ПРИМЕРЫ ЯВНЫХ ПРЕОБРАЗОВАНИЙ
     * 
     * Демонстрация различных типов явных преобразований
     */
    std::cout << "=== ДОПОЛНИТЕЛЬНЫЕ ПРИМЕРЫ ЯВНЫХ ПРЕОБРАЗОВАНИЙ ===" << std::endl;
    
    // Преобразование int в double
    int whole_number = 42;
    double real_number = static_cast<double>(whole_number);
    std::cout << "int " << whole_number << " → double " << real_number << std::endl;
    
    // Преобразование char в int
    char character = 'Z';
    int ascii_value = static_cast<int>(character);
    std::cout << "char '" << character << "' → int " << ascii_value << std::endl;
    
    // Преобразование double в float
    double precise_value = 2.71828182846;
    float approximate_value = static_cast<float>(precise_value);
    std::cout << "double " << precise_value << " → float " << approximate_value << std::endl;
    
    // Преобразование bool в int
    bool boolean_value = true;
    int int_from_bool = static_cast<int>(boolean_value);
    std::cout << "bool " << std::boolalpha << boolean_value << " → int " << int_from_bool << std::endl;
    std::cout << std::endl;

    /*
     * РЕКОМЕНДАЦИИ ПО ИСПОЛЬЗОВАНИЮ ЯВНЫХ ПРЕОБРАЗОВАНИЙ
     * 
     * Практические советы для безопасного использования
     */
    std::cout << "=== РЕКОМЕНДАЦИИ ПО ЯВНЫМ ПРЕОБРАЗОВАНИЯМ ===" << std::endl;
    std::cout << "1. Используйте static_cast для явных преобразований" << std::endl;
    std::cout << "2. Избегайте C-style приведения (int)(value)" << std::endl;
    std::cout << "3. Будьте осторожны с сужающими преобразованиями" << std::endl;
    std::cout << "4. Проверяйте диапазоны значений перед преобразованием" << std::endl;
    std::cout << "5. Документируйте намеренные преобразования" << std::endl;
    std::cout << "6. Используйте явные преобразования для ясности кода" << std::endl;
    std::cout << std::endl;
    
    return 0;
}

/*
 * РЕЗЮМЕ: ЯВНЫЕ ПРЕОБРАЗОВАНИЯ ТИПОВ В C++
 * 
 * 1. ОСНОВНЫЕ ПОНЯТИЯ:
 *    - Явные преобразования выполняются принудительно
 *    - static_cast - современный способ явного преобразования
 *    - C-style приведения устарели и не рекомендуются
 * 
 * 2. static_cast:
 *    - Безопасный способ явного преобразования
 *    - Обеспечивает лучшую читаемость кода
 *    - Компилятор может предупреждать о потенциальных проблемах
 *    - Работает с большинством типов данных
 * 
 * 3. ПОРЯДОК ВЫПОЛНЕНИЯ ОПЕРАЦИЙ:
 *    - static_cast<int>(a) + static_cast<int>(b): преобразование затем операция
 *    - static_cast<int>(a + b): операция затем преобразование
 *    - Результаты могут отличаться!
 * 
 * 4. ПРЕИМУЩЕСТВА ЯВНЫХ ПРЕОБРАЗОВАНИЙ:
 *    - Ясность намерений программиста
 *    - Лучшая читаемость кода
 *    - Возможность контроля над преобразованиями
 *    - Предотвращение неожиданных неявных преобразований
 * 
 * 5. ТИПЫ ЯВНЫХ ПРЕОБРАЗОВАНИЙ:
 *    - static_cast - безопасные преобразования
 *    - dynamic_cast - для полиморфных типов
 *    - const_cast - для изменения const/volatile
 *    - reinterpret_cast - для низкоуровневых преобразований
 * 
 * 6. ПРАКТИЧЕСКИЕ ПРИМЕНЕНИЯ:
 *    - Преобразование вещественных чисел в целые
 *    - Работа с указателями разных типов
 *    - Преобразование между связанными типами
 *    - Явное указание намерений в коде
 * 
 * 7. РЕКОМЕНДАЦИИ:
 *    - Используйте static_cast вместо C-style приведения
 *    - Будьте осторожны с сужающими преобразованиями
 *    - Проверяйте диапазоны значений
 *    - Документируйте намеренные преобразования
 *    - Используйте для улучшения читаемости кода
 * 
 * 8. ВАЖНЫЕ ЗАМЕЧАНИЯ:
 *    - Явные преобразования не делают небезопасные операции безопасными
 *    - Всегда проверяйте результаты преобразований
 *    - Используйте современные стандарты C++ для лучшей безопасности
 *    - Изучайте предупреждения компилятора
 * 
 * 9. ДОПОЛНИТЕЛЬНЫЕ ВОЗМОЖНОСТИ:
 *    - Пользовательские операторы преобразования
 *    - explicit конструкторы (предотвращение неявных преобразований)
 *    - std::any, std::variant для безопасной работы с типами
 *    - Concepts (C++20) для ограничения типов
 */