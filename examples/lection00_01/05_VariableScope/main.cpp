/*
 * ОБЛАСТЬ ВИДИМОСТИ ПЕРЕМЕННЫХ В C++
 * 
 * Этот файл демонстрирует различные типы областей видимости:
 * - Глобальные переменные (доступны везде)
 * - Локальные переменные функций (доступны только внутри функции)
 * - Локальные переменные блоков (доступны только внутри блока {})
 * - Сокрытие переменных (shadowing)
 */

#include <iostream>

/*
 * ГЛОБАЛЬНАЯ ПЕРЕМЕННАЯ
 * 
 * Объявлена вне всех функций
 * Доступна во всех функциях программы
 * Инициализируется при запуске программы
 * Живет до завершения программы
 */
int global_var1{23}; // Глобальная переменная

/*
 * ФУНКЦИЯ БЕЗ ДОСТУПА К ЛОКАЛЬНЫМ ПЕРЕМЕННЫМ
 * 
 * Демонстрирует, что локальные переменные недоступны из других функций
 */
void some_other_function(){
    // local_var = 5;  // ОШИБКА! local_var не видна в этой функции
    // Переменная local_var существует только в функции some_function()
}

/*
 * ФУНКЦИЯ С ЛОКАЛЬНЫМИ ПЕРЕМЕННЫМИ
 * 
 * Демонстрирует работу с глобальными и локальными переменными
 */
void some_function(){
    /*
     * ЛОКАЛЬНАЯ ПЕРЕМЕННАЯ ФУНКЦИИ
     * 
     * Объявлена внутри функции
     * Доступна только внутри этой функции
     * Создается при вызове функции
     * Уничтожается при завершении функции
     */
    int local_var{10};
    
    // Доступ к глобальной переменной (работает)
    std::cout << "Inside function global_var : " << global_var1 << std::endl;
    
    // Доступ к локальной переменной функции (работает)
    std::cout << "Inside function local_var : " << local_var << std::endl;
    
    some_other_function();
    
    /*
     * БЛОК КОДА С ЛОКАЛЬНОЙ ПЕРЕМЕННОЙ
     * 
     * Переменные в блоке {} доступны только внутри этого блока
     * Это создает еще более узкую область видимости
     */
    {
        int local_local{3};  // Локальная переменная блока
        // local_local доступна только здесь
    }
    
    // std::cout << local_local << std::endl;  // ОШИБКА! local_local не видна вне блока
}





/*
 * ГЛАВНАЯ ФУНКЦИЯ
 * 
 * Демонстрирует различные области видимости переменных
 */
int main(){
    // Доступ к глобальной переменной (работает)
    std::cout << "Inside main function global_var : " << global_var1 << std::endl;
    
    /*
     * ЛОКАЛЬНАЯ ПЕРЕМЕННАЯ В MAIN
     * 
     * Это НЕ та же переменная, что local_var в some_function()
     * Это разные переменные с одинаковыми именами в разных областях видимости
     */
    int local_var{5};  // Локальная переменная main()
    
    some_function();
    
    return 0;
}

/*
 * КЛЮЧЕВЫЕ ПОНЯТИЯ ОБЛАСТИ ВИДИМОСТИ:
 * 
 * 1. ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ:
 *    - Объявляются вне всех функций
 *    - Доступны во всех функциях программы
 *    - Живут до завершения программы
 *    - Инициализируются при запуске программы
 * 
 * 2. ЛОКАЛЬНЫЕ ПЕРЕМЕННЫЕ ФУНКЦИЙ:
 *    - Объявляются внутри функции
 *    - Доступны только внутри этой функции
 *    - Создаются при вызове функции
 *    - Уничтожаются при завершении функции
 * 
 * 3. ЛОКАЛЬНЫЕ ПЕРЕМЕННЫЕ БЛОКОВ:
 *    - Объявляются внутри блока {}
 *    - Доступны только внутри этого блока
 *    - Создаются при входе в блок
 *    - Уничтожаются при выходе из блока
 * 
 * 4. СОКРЫТИЕ ПЕРЕМЕННЫХ (SHADOWING):
 *    - Локальная переменная может "скрыть" глобальную с тем же именем
 *    - Внутри области видимости локальной переменной глобальная недоступна
 * 
 * 5. ПРАВИЛА ДОСТУПА:
 *    - Внутренние области видимости могут видеть внешние
 *    - Внешние области видимости НЕ могут видеть внутренние
 *    - При одинаковых именах приоритет у более локальной переменной
 * 
 * 6. ПРАКТИЧЕСКИЕ СОВЕТЫ:
 *    - Избегайте глобальных переменных (сложно отслеживать изменения)
 *    - Используйте короткие имена для локальных переменных
 *    - Используйте длинные имена для глобальных переменных
 *    - Блоки {} полезны для ограничения области видимости временных переменных
 * 
 * 7. ПРИМЕРЫ ОШИБОК:
 *    - Попытка использовать переменную вне её области видимости
 *    - Попытка изменить глобальную переменную из другой функции
 *    - Использование переменной до её объявления
 */