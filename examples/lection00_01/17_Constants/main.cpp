/*
 * КОНСТАНТЫ В C++
 * 
 * Этот файл демонстрирует использование констант в C++:
 * - Объявление констант с помощью const
 * - Инициализация констант при объявлении
 * - Использование констант в выражениях
 * - Ограничения на изменение констант
 * - Практические примеры применения
 */

#include <iostream>  // Для потоков ввода-вывода

int main() {
    /*
     * ОБЪЯВЛЕНИЕ КОНСТАНТ
     * 
     * const - ключевое слово, которое делает переменную неизменяемой
     * Константа должна быть инициализирована при объявлении
     * Попытка изменить константу приведет к ошибке компиляции
     */
    const int person_age {34};        // Возраст человека (неизменяемый)
    const float person_height {1.67f}; // Рост человека в метрах (неизменяемый)
    
    /*
     * ПОПЫТКА ИЗМЕНЕНИЯ КОНСТАНТ (ЗАКОММЕНТИРОВАНО)
     * 
     * Следующие строки закомментированы, потому что они вызывают ошибку компиляции.
     * Константы нельзя изменять после их инициализации.
     */
    // person_age = 55;     // ОШИБКА: нельзя изменить константу
    // person_height = 1.8f; // ОШИБКА: нельзя изменить константу
    
    std::cout << "=== ИСХОДНЫЕ КОНСТАНТЫ ===" << std::endl;
    std::cout << "Возраст: " << person_age << " лет" << std::endl;
    std::cout << "Рост: " << person_height << " метров" << std::endl;
    std::cout << std::endl;

    /*
     * ИСПОЛЬЗОВАНИЕ КОНСТАНТ В ВЫРАЖЕНИЯХ
     * 
     * Константы можно использовать в арифметических выражениях
     * и присваивать их значения обычным переменным
     */
    int total_months {12 * person_age};  // Общее количество месяцев жизни
    
    std::cout << "=== ВЫЧИСЛЕНИЯ С КОНСТАНТАМИ ===" << std::endl;
    std::cout << "Общее количество месяцев жизни: " << total_months << std::endl;
    std::cout << std::endl;

    /*
     * КОНСТАНТЫ, ИНИЦИАЛИЗИРОВАННЫЕ ВЫЧИСЛЕНИЯМИ
     * 
     * Константа может быть инициализирована результатом вычисления
     * Важно: вычисление происходит во время компиляции, если это возможно
     */
    const int birth_year = 2024 - person_age;  // Год рождения (вычисляется)
    
    std::cout << "=== ВЫЧИСЛЕННЫЕ КОНСТАНТЫ ===" << std::endl;
    std::cout << "Год рождения: " << birth_year << std::endl;
    std::cout << std::endl;

    /*
     * ПРАКТИЧЕСКИЕ ПРИМЕРЫ КОНСТАНТ
     * 
     * Демонстрация различных способов использования констант
     * в реальных программах
     */
    std::cout << "=== ПРАКТИЧЕСКИЕ ПРИМЕРЫ ===" << std::endl;
    
    // Математические константы
    const double pi = 3.14159265359;
    const double e = 2.71828182846;
    
    // Константы для расчетов
    const int days_in_year = 365;
    const int hours_in_day = 24;
    const int minutes_in_hour = 60;
    
    // Вычисления с использованием констант
    int total_hours_lived = person_age * days_in_year * hours_in_day;
    int total_minutes_lived = total_hours_lived * minutes_in_hour;
    
    std::cout << "Математические константы:" << std::endl;
    std::cout << "π (пи) = " << pi << std::endl;
    std::cout << "e (число Эйлера) = " << e << std::endl;
    std::cout << std::endl;
    
    std::cout << "Временные константы:" << std::endl;
    std::cout << "Дней в году: " << days_in_year << std::endl;
    std::cout << "Часов в дне: " << hours_in_day << std::endl;
    std::cout << "Минут в часе: " << minutes_in_hour << std::endl;
    std::cout << std::endl;
    
    std::cout << "Вычисления времени жизни:" << std::endl;
    std::cout << "Общее количество часов жизни: " << total_hours_lived << std::endl;
    std::cout << "Общее количество минут жизни: " << total_minutes_lived << std::endl;
    std::cout << std::endl;

    /*
     * ДЕМОНСТРАЦИЯ ПРЕИМУЩЕСТВ КОНСТАНТ
     * 
     * Константы делают код более читаемым, безопасным и легким для понимания
     */
    std::cout << "=== ПРЕИМУЩЕСТВА КОНСТАНТ ===" << std::endl;
    
    // Константы для настройки программы
    const int max_attempts = 3;
    const double interest_rate = 0.05;  // 5% годовых
    const std::string company_name = "TechCorp";
    
    std::cout << "Настройки программы:" << std::endl;
    std::cout << "Максимальное количество попыток: " << max_attempts << std::endl;
    std::cout << "Процентная ставка: " << (interest_rate * 100) << "%" << std::endl;
    std::cout << "Название компании: " << company_name << std::endl;
    std::cout << std::endl;
    
    return 0;
}

/*
 * РЕЗЮМЕ: КОНСТАНТЫ В C++
 * 
 * 1. ОБЪЯВЛЕНИЕ КОНСТАНТ:
 *    - const тип имя = значение;
 *    - const тип имя {значение};
 *    - Константа должна быть инициализирована при объявлении
 * 
 * 2. ОГРАНИЧЕНИЯ:
 *    - Константы нельзя изменять после инициализации
 *    - Попытка изменения вызывает ошибку компиляции
 *    - Константы можно использовать в выражениях
 * 
 * 3. ТИПЫ КОНСТАНТ:
 *    - Числовые константы (int, double, float)
 *    - Строковые константы (const char*, std::string)
 *    - Булевы константы (const bool)
 *    - Константы, вычисленные из выражений
 * 
 * 4. ПРАКТИЧЕСКИЕ ПРИМЕНЕНИЯ:
 *    - Математические константы (π, e)
 *    - Настройки программы (лимиты, пороги)
 *    - Конфигурационные параметры
 *    - Магические числа (замена на осмысленные имена)
 * 
 * 5. ПРЕИМУЩЕСТВА ИСПОЛЬЗОВАНИЯ:
 *    - Безопасность: предотвращение случайных изменений
 *    - Читаемость: осмысленные имена вместо магических чисел
 *    - Поддержка: легче изменять значения в одном месте
 *    - Оптимизация: компилятор может оптимизировать код
 * 
 * 6. ВАЖНЫЕ ЗАМЕЧАНИЯ:
 *    - Используйте const для всех значений, которые не должны изменяться
 *    - Инициализируйте константы при объявлении
 *    - Выбирайте осмысленные имена для констант
 *    - Константы делают код более надежным и понятным
 * 
 * 7. ДОПОЛНИТЕЛЬНЫЕ ВОЗМОЖНОСТИ:
 *    - constexpr - константы времени компиляции (C++11)
 *    - const_cast - приведение типов для констант (продвинутая тема)
 *    - const методы - методы, которые не изменяют объект
 */