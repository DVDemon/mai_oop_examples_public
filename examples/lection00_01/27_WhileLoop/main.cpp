/*
 * ЦИКЛ WHILE В C++
 * 
 * Этот файл демонстрирует использование цикла while:
 * - Основы синтаксиса цикла while
 * - Сравнение с циклом for
 * - Управление условием и инкрементом
 * - Практические примеры и рекомендации
 */

#include <iostream>  // Для потоков ввода-вывода

int main() {
    /*
     * ПОДГОТОВКА ПЕРЕМЕННЫХ ДЛЯ ЦИКЛА WHILE
     * 
     * Цикл while требует явного объявления переменных
     * для условия и управления циклом
     */
    const size_t ITERATION_COUNT{100};  // Константа для количества итераций
    size_t counter{0};                  // Счетчик итераций (инициализация)
    
    std::cout << "=== ЦИКЛ WHILE В C++ ===" << std::endl;
    std::cout << "Демонстрация базового цикла while" << std::endl;
    std::cout << std::endl;

    /*
     * ОСНОВНОЙ ЦИКЛ WHILE
     * 
     * Синтаксис: while (условие) { тело_цикла }
     * 
     * Особенности:
     * - Условие проверяется ПЕРЕД каждой итерацией
     * - Если условие ложно с самого начала, цикл не выполнится ни разу
     * - Требует явного управления переменными цикла
     * - Подходит для случаев, когда количество итераций неизвестно заранее
     */
    std::cout << "=== ОСНОВНОЙ ЦИКЛ WHILE ===" << std::endl;
    std::cout << "Выполняем цикл while с явным управлением счетчиком:" << std::endl;
    
    while (counter < ITERATION_COUNT) {  // Проверка условия
        std::cout << "Итерация " << counter << ": Изучаем C++" << std::endl;
        
        ++counter;  // Обновление счетчика (ОБЯЗАТЕЛЬНО!)
    }
    
    std::cout << "Цикл завершен!" << std::endl;
    std::cout << std::endl;

    /*
     * ПРИМЕР 2: ЦИКЛ WHILE С УСЛОВИЕМ УМЕНЬШЕНИЯ
     * 
     * Демонстрация обратного отсчета с использованием while
     */
    std::cout << "=== ПРИМЕР 2: ОБРАТНЫЙ ОТСЧЕТ ===" << std::endl;
    std::cout << "Обратный отсчет с использованием while:" << std::endl;
    
    int countdown_value = 10;
    while (countdown_value > 0) {
        std::cout << "Осталось: " << countdown_value << " секунд" << std::endl;
        --countdown_value;  // Уменьшение значения
    }
    std::cout << "Время вышло!" << std::endl;
    std::cout << std::endl;

    /*
     * ПРИМЕР 3: ЦИКЛ WHILE С СЛОЖНЫМ УСЛОВИЕМ
     * 
     * Демонстрация использования сложных условий в while
     */
    std::cout << "=== ПРИМЕР 3: СЛОЖНОЕ УСЛОВИЕ ===" << std::endl;
    std::cout << "Цикл с несколькими условиями:" << std::endl;
    
    int first_number = 1, second_number = 1;
    int iteration_count = 0;
    
    while (first_number < 100 && second_number < 50 && iteration_count < 10) {
        std::cout << "first_number: " << first_number 
                  << ", second_number: " << second_number 
                  << ", итерация: " << iteration_count << std::endl;
        
        first_number *= 2;      // Удваиваем первое число
        second_number += 5;     // Увеличиваем второе на 5
        ++iteration_count;      // Считаем итерации
    }
    std::cout << "Цикл завершен по условию!" << std::endl;
    std::cout << std::endl;

    /*
     * ПРИМЕР 4: ЦИКЛ WHILE С ПОЛЬЗОВАТЕЛЬСКИМ ВВОДОМ
     * 
     * Демонстрация цикла while для обработки пользовательского ввода
     */
    std::cout << "=== ПРИМЕР 4: ОБРАБОТКА ПОЛЬЗОВАТЕЛЬСКОГО ВВОДА ===" << std::endl;
    std::cout << "Введите числа (0 для завершения):" << std::endl;
    
    int user_input;
    int sum = 0;
    int input_count = 0;
    
    std::cout << "Введите число: ";
    std::cin >> user_input;
    
    while (user_input != 0) {  // Продолжаем, пока не введен 0
        sum += user_input;
        ++input_count;
        std::cout << "Сумма: " << sum << ", количество: " << input_count << std::endl;
        
        std::cout << "Введите следующее число (0 для завершения): ";
        std::cin >> user_input;
    }
    
    if (input_count > 0) {
        double average = static_cast<double>(sum) / input_count;
        std::cout << "Итоговая сумма: " << sum << std::endl;
        std::cout << "Среднее значение: " << average << std::endl;
    } else {
        std::cout << "Числа не были введены." << std::endl;
    }
    std::cout << std::endl;

    /*
     * ПРИМЕР 5: БЕСКОНЕЧНЫЙ ЦИКЛ И ВЫХОД ИЗ НЕГО
     * 
     * Демонстрация бесконечного цикла while с условием выхода
     */
    std::cout << "=== ПРИМЕР 5: БЕСКОНЕЧНЫЙ ЦИКЛ С ВЫХОДОМ ===" << std::endl;
    std::cout << "Симуляция бесконечного цикла с условием выхода:" << std::endl;
    
    int infinite_counter = 0;
    while (true) {  // Бесконечный цикл
        std::cout << "Бесконечный цикл, итерация: " << infinite_counter << std::endl;
        ++infinite_counter;
        
        // Условие выхода из бесконечного цикла
        if (infinite_counter >= 5) {
            std::cout << "Достигнуто условие выхода!" << std::endl;
            break;  // Принудительный выход из цикла
        }
    }
    std::cout << "Выход из бесконечного цикла выполнен!" << std::endl;
    std::cout << std::endl;

    /*
     * ПРИМЕР 6: СРАВНЕНИЕ WHILE И FOR
     * 
     * Демонстрация эквивалентности циклов while и for
     */
    std::cout << "=== ПРИМЕР 6: СРАВНЕНИЕ WHILE И FOR ===" << std::endl;
    
    // Цикл while
    std::cout << "Цикл while:" << std::endl;
    int while_counter = 0;
    while (while_counter < 3) {
        std::cout << "  while: " << while_counter << std::endl;
        ++while_counter;
    }
    
    // Эквивалентный цикл for
    std::cout << "Эквивалентный цикл for:" << std::endl;
    for (int for_counter = 0; for_counter < 3; ++for_counter) {
        std::cout << "  for: " << for_counter << std::endl;
    }
    std::cout << std::endl;

    /*
     * РЕКОМЕНДАЦИИ ПО ИСПОЛЬЗОВАНИЮ ЦИКЛА WHILE
     * 
     * Практические советы для эффективного использования
     */
    std::cout << "=== РЕКОМЕНДАЦИИ ===" << std::endl;
    std::cout << "1. Используйте while когда количество итераций неизвестно заранее" << std::endl;
    std::cout << "2. Всегда обновляйте переменные условия в теле цикла" << std::endl;
    std::cout << "3. Избегайте бесконечных циклов без условия выхода" << std::endl;
    std::cout << "4. Предпочитайте for для циклов с известным количеством итераций" << std::endl;
    std::cout << "5. Используйте осмысленные имена для переменных цикла" << std::endl;
    std::cout << "6. Проверяйте условие на каждой итерации" << std::endl;
    std::cout << "7. Рассмотрите do-while для циклов, которые должны выполниться хотя бы раз" << std::endl;
    std::cout << std::endl;
    
    return 0;
}

/*
 * РЕЗЮМЕ: ЦИКЛ WHILE В C++
 * 
 * 1. ОСНОВНЫЕ ПОНЯТИЯ:
 *    - Цикл while выполняет тело пока условие истинно
 *    - Синтаксис: while (условие) { тело_цикла }
 *    - Условие проверяется ПЕРЕД каждой итерацией
 * 
 * 2. СИНТАКСИС:
 *    - while (условие) { тело }
 *    - Требует явного управления переменными цикла
 *    - Условие должно изменяться в теле цикла
 * 
 * 3. ОСОБЕННОСТИ:
 *    - Может не выполниться ни разу (если условие ложно)
 *    - Подходит для неизвестного количества итераций
 *    - Требует явного обновления переменных
 *    - Проверка условия на каждой итерации
 * 
 * 4. ПРАКТИЧЕСКИЕ ПРИМЕНЕНИЯ:
 *    - Обработка пользовательского ввода
 *    - Чтение файлов до конца
 *    - Ожидание событий
 *    - Циклы с неизвестным количеством итераций
 *    - Обратный отсчет
 * 
 * 5. ПРЕИМУЩЕСТВА:
 *    - Гибкость в условиях
 *    - Подходит для неизвестного количества итераций
 *    - Простой синтаксис
 *    - Легко читается
 * 
 * 6. НЕДОСТАТКИ:
 *    - Риск бесконечных циклов
 *    - Требует явного управления переменными
 *    - Может не выполниться ни разу
 *    - Сложнее отлаживать
 * 
 * 7. РЕКОМЕНДАЦИИ:
 *    - Используйте для неизвестного количества итераций
 *    - Всегда обновляйте переменные условия
 *    - Избегайте бесконечных циклов
 *    - Предпочитайте for для известного количества итераций
 *    - Используйте осмысленные имена переменных
 * 
 * 8. ВАЖНЫЕ ЗАМЕЧАНИЯ:
 *    - Условие проверяется ПЕРЕД итерацией
 *    - Переменные должны изменяться в теле цикла
 *    - Риск бесконечных циклов
 *    - Может не выполниться ни разу
 * 
 * 9. АЛЬТЕРНАТИВЫ:
 *    - Цикл for для известного количества итераций
 *    - do-while для циклов, выполняющихся хотя бы раз
 *    - Рекурсия для некоторых случаев
 *    - Алгоритмы STL для стандартных операций
 * 
 * 10. ДОПОЛНИТЕЛЬНЫЕ ВОЗМОЖНОСТИ:
 *     - break для принудительного выхода
 *     - continue для пропуска итерации
 *     - Вложенные циклы while
 *     - Комбинирование с другими конструкциями
 */