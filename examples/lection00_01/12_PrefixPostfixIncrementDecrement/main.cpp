/*
 * ПРЕФИКСНЫЕ И ПОСТФИКСНЫЕ ОПЕРАЦИИ ИНКРЕМЕНТА И ДЕКРЕМЕНТА
 * 
 * Этот файл демонстрирует различные способы увеличения и уменьшения значений:
 * - Обычные арифметические операции (+1, -1)
 * - Постфиксные операции (value++, value--)
 * - Префиксные операции (++value, --value)
 * - Различия в поведении и порядке выполнения операций
 * - Использование в выражениях и отдельно
 */

#include <iostream>  // Для потоков ввода-вывода

int main(){
    /*
     * ОБЫЧНЫЕ АРИФМЕТИЧЕСКИЕ ОПЕРАЦИИ
     * 
     * Самый простой и понятный способ изменения значения
     * Явно показывает, что происходит с переменной
     */
    std::cout << "=== ОБЫЧНЫЕ АРИФМЕТИЧЕСКИЕ ОПЕРАЦИИ ===" << std::endl;
    
    int counter {5};  // Инициализируем счетчик значением 5
    
    // Увеличение на 1
    counter = counter + 1;  // 6
    std::cout << "После увеличения: " << counter << std::endl;
    
    // Сброс значения
    counter = 5;
    
    // Уменьшение на 1
    counter = counter - 1;  // 4
    std::cout << "После уменьшения: " << counter << std::endl;
    std::cout << std::endl;

    /*
     * ПОСТФИКСНЫЕ ОПЕРАЦИИ (value++, value--)
     * 
     * Постфиксные операции:
     * - Сначала возвращают текущее значение
     * - Затем изменяют переменную
     * - Полезны, когда нужно использовать старое значение
     */
    std::cout << "=== ПОСТФИКСНЫЕ ОПЕРАЦИИ ===" << std::endl;
    
    // Постфиксный инкремент
    counter = 5;  // Сброс значения
    std::cout << "Значение (до инкремента): " << counter++ << std::endl;  // Выводит 5, затем увеличивает
    std::cout << "Значение (после инкремента): " << counter << std::endl;  // Выводит 6
    
    std::cout << std::endl;
    
    // Постфиксный декремент
    counter = 5;  // Сброс значения
    std::cout << "Значение (до декремента): " << counter-- << std::endl;  // Выводит 5, затем уменьшает
    std::cout << "Значение (после декремента): " << counter << std::endl;  // Выводит 4
    std::cout << std::endl;

    /*
     * ПРЕФИКСНЫЕ ОПЕРАЦИИ (++value, --value)
     * 
     * Префиксные операции:
     * - Сначала изменяют переменную
     * - Затем возвращают новое значение
     * - Более эффективны (не создают временную копию)
     * - Полезны, когда нужно использовать новое значение
     */
    std::cout << "=== ПРЕФИКСНЫЕ ОПЕРАЦИИ ===" << std::endl;
    
    // Префиксный инкремент (отдельно)
    counter = 5;  // Сброс значения
    ++counter;  // Увеличиваем значение
    std::cout << "Значение (после ++counter): " << counter << std::endl;  // Выводит 6
    
    // Префиксный инкремент (в выражении)
    counter = 5;  // Сброс значения
    std::cout << "Значение (++counter в выражении): " << ++counter << std::endl;  // Выводит 6
    
    std::cout << std::endl;
    
    // Префиксный декремент (отдельно)
    counter = 5;  // Сброс значения
    --counter;  // Уменьшаем значение
    std::cout << "Значение (после --counter): " << counter << std::endl;  // Выводит 4
    
    // Префиксный декремент (в выражении)
    counter = 5;  // Сброс значения
    std::cout << "Значение (--counter в выражении): " << --counter << std::endl;  // Выводит 4
    std::cout << std::endl;

    /*
     * СРАВНЕНИЕ ПРЕФИКСНЫХ И ПОСТФИКСНЫХ ОПЕРАЦИЙ
     */
    std::cout << "=== СРАВНЕНИЕ ПРЕФИКСНЫХ И ПОСТФИКСНЫХ ОПЕРАЦИЙ ===" << std::endl;
    
    int prefix_value {5};
    int postfix_value {5};
    
    std::cout << "Исходные значения: prefix_value = " << prefix_value 
              << ", postfix_value = " << postfix_value << std::endl;
    
    // Префиксная операция
    int result1 = ++prefix_value;  // prefix_value становится 6, result1 = 6
    std::cout << "После ++prefix_value: prefix_value = " << prefix_value 
              << ", result1 = " << result1 << std::endl;
    
    // Постфиксная операция
    int result2 = postfix_value++;  // result2 = 5, postfix_value становится 6
    std::cout << "После postfix_value++: postfix_value = " << postfix_value 
              << ", result2 = " << result2 << std::endl;

    return 0;
}

/*
 * РЕЗЮМЕ: ОПЕРАЦИИ ИНКРЕМЕНТА И ДЕКРЕМЕНТА
 * 
 * 1. ОБЫЧНЫЕ АРИФМЕТИЧЕСКИЕ ОПЕРАЦИИ:
 *    - value = value + 1;  // Явное увеличение
 *    - value = value - 1;  // Явное уменьшение
 *    - Понятно и читаемо
 *    - Менее эффективно
 * 
 * 2. ПОСТФИКСНЫЕ ОПЕРАЦИИ (value++, value--):
 *    - Сначала возвращают текущее значение
 *    - Затем изменяют переменную
 *    - Полезны, когда нужно использовать старое значение
 *    - Менее эффективны (создают временную копию)
 * 
 * 3. ПРЕФИКСНЫЕ ОПЕРАЦИИ (++value, --value):
 *    - Сначала изменяют переменную
 *    - Затем возвращают новое значение
 *    - Более эффективны
 *    - Рекомендуются для большинства случаев
 * 
 * 4. ПРАВИЛА ИСПОЛЬЗОВАНИЯ:
 *    - Используйте префиксные операции, если не нужен результат
 *    - Используйте постфиксные операции, если нужен результат до изменения
 *    - В циклах обычно используют префиксные операции
 *    - В выражениях выбор зависит от логики программы
 * 
 * 5. ПРИМЕРЫ ПРИМЕНЕНИЯ:
 *    - Циклы: for(int i = 0; i < n; ++i)
 *    - Итераторы: ++iterator
 *    - Счетчики: ++counter
 *    - Индексы массивов: ++index
 * 
 * 6. ВАЖНЫЕ ЗАМЕЧАНИЯ:
 *    - Не используйте операции инкремента/декремента в одном выражении несколько раз
 *    - Порядок выполнения может быть неопределенным
 *    - Префиксные операции предпочтительнее для производительности
 *    - Постфиксные операции могут создавать временные объекты
 * 
 * 7. СВЯЗЬ С ПРЕДЫДУЩИМИ ТЕМАМИ:
 *    - Работают со всеми целочисленными типами (int, char, etc.)
 *    - Можно использовать с auto: auto result = ++value;
 *    - sizeof() не изменяется при использовании этих операций
 *    - Операции изменяют значение переменной (побочный эффект)
 */