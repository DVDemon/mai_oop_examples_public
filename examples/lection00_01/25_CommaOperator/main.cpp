/*
 * ОПЕРАТОР ЗАПЯТОЙ В C++
 * 
 * Этот файл демонстрирует использование оператора запятой (,):
 * - Объединение нескольких выражений в одно
 * - Порядок выполнения выражений
 * - Возвращаемое значение (значение правого операнда)
 * - Практические примеры и рекомендации
 */

#include <iostream>  // Для потоков ввода-вывода

int main() {
    /*
     * ОСНОВЫ ОПЕРАТОРА ЗАПЯТОЙ
     * 
     * Оператор запятой (,) объединяет два или более выражения в одно.
     * Выражения выполняются слева направо, а значение всего выражения
     * равно значению самого правого операнда.
     * 
     * Синтаксис: (выражение1, выражение2, выражение3)
     * Результат: значение выражения3
     */
    std::cout << "=== ОСНОВЫ ОПЕРАТОРА ЗАПЯТОЙ ===" << std::endl;
    std::cout << "Оператор запятой объединяет выражения и возвращает значение правого операнда" << std::endl;
    std::cout << std::endl;

    /*
     * ПОДГОТОВКА ПЕРЕМЕННЫХ ДЛЯ ДЕМОНСТРАЦИИ
     * 
     * Создаем переменные для демонстрации работы оператора запятой
     */
    int increment_value {5};    // Значение для инкремента
    int first_number {10};      // Первое число
    int second_number {20};     // Второе число  
    int third_number {25};      // Третье число
    
    std::cout << "=== ИСХОДНЫЕ ЗНАЧЕНИЯ ===" << std::endl;
    std::cout << "increment_value: " << increment_value << std::endl;
    std::cout << "first_number: " << first_number << std::endl;
    std::cout << "second_number: " << second_number << std::endl;
    std::cout << "third_number: " << third_number << std::endl;
    std::cout << std::endl;

    /*
     * СЛОЖНЫЙ ПРИМЕР С ОПЕРАТОРОМ ЗАПЯТОЙ
     * 
     * Демонстрация сложного выражения с оператором запятой:
     * (first_number *= ++increment_value, second_number - (++increment_value), third_number += ++increment_value)
     * 
     * Порядок выполнения:
     * 1. ++increment_value (5 -> 6), first_number *= 6 (10 * 6 = 60)
     * 2. ++increment_value (6 -> 7), second_number = 7 (20 - 7 = 13)
     * 3. ++increment_value (7 -> 8), third_number += 8 (25 + 8 = 33)
     * 
     * Результат: значение третьего выражения (33)
     */
    std::cout << "=== СЛОЖНЫЙ ПРИМЕР С ОПЕРАТОРОМ ЗАПЯТОЙ ===" << std::endl;
    std::cout << "Выполняем сложное выражение с оператором запятой..." << std::endl;
    
    int result = (first_number *= ++increment_value, 
                  second_number = (++increment_value), 
                  third_number += ++increment_value);
    
    std::cout << "Результат вычисления: " << result << std::endl;
    std::cout << std::endl;
    
    /*
     * АНАЛИЗ РЕЗУЛЬТАТОВ
     * 
     * Показываем, как изменились переменные после выполнения выражения
     */
    std::cout << "=== АНАЛИЗ РЕЗУЛЬТАТОВ ===" << std::endl;
    std::cout << "Значения после выполнения выражения:" << std::endl;
    std::cout << "increment_value: " << increment_value << " (было 5, стало 8)" << std::endl;
    std::cout << "first_number: " << first_number << " (было 10, стало 60)" << std::endl;
    std::cout << "second_number: " << second_number << " (осталось 20)" << std::endl;
    std::cout << "third_number: " << third_number << " (было 25, стало 33)" << std::endl;
    std::cout << "result: " << result << " (значение правого операнда)" << std::endl;
    std::cout << std::endl;

    /*
     * ПРОСТЫЕ ПРИМЕРЫ ОПЕРАТОРА ЗАПЯТОЙ
     * 
     * Демонстрация более простых и понятных примеров
     */
    std::cout << "=== ПРОСТЫЕ ПРИМЕРЫ ===" << std::endl;
    
    // Пример 1: Простое объединение выражений
    int a = 5, b = 10;
    int simple_result = (++a, ++b, a + b);
    std::cout << "Простой пример: (++a, ++b, a + b)" << std::endl;
    std::cout << "a = " << a << ", b = " << b << ", результат = " << simple_result << std::endl;
    std::cout << std::endl;
    
    // Пример 2: Использование в условиях
    int x = 1, y = 2, z = 3;
    if ((x++, y++, z++) > 2) {
        std::cout << "Условие выполнено: x = " << x << ", y = " << y << ", z = " << z << std::endl;
    }
    std::cout << std::endl;
    
    // Пример 3: Использование в циклах
    std::cout << "Использование в цикле for:" << std::endl;
    for (int i = 0, j = 10; i < 3; ++i, --j) {
        std::cout << "i = " << i << ", j = " << j << std::endl;
    }
    std::cout << std::endl;

    /*
     * ПРАКТИЧЕСКИЕ ПРИМЕНЕНИЯ ОПЕРАТОРА ЗАПЯТОЙ
     * 
     * Демонстрация реальных случаев использования
     */
    std::cout << "=== ПРАКТИЧЕСКИЕ ПРИМЕНЕНИЯ ===" << std::endl;
    
    // Пример 1: Обмен значений
    int value1 = 100, value2 = 200;
    std::cout << "До обмена: value1 = " << value1 << ", value2 = " << value2 << std::endl;
    
    int temp = (value1 = value2, value2 = value1, value1);  // НЕПРАВИЛЬНО! Не работает как обмен
    std::cout << "После 'обмена': value1 = " << value1 << ", value2 = " << value2 << std::endl;
    std::cout << "Правильный обмен требует временной переменной!" << std::endl;
    std::cout << std::endl;
    
    // Пример 2: Множественные операции
    int counter = 0, sum = 0;
    sum = (counter++, sum + counter, counter * 2);
    std::cout << "Множественные операции: counter = " << counter << ", sum = " << sum << std::endl;
    std::cout << std::endl;
    
    // Пример 3: Использование в функциях (осторожно!)
    std::cout << "Использование в вызовах функций (осторожно!):" << std::endl;
    int func_result = (std::cout << "Выполняем операции... ", 42);
    std::cout << "Результат: " << func_result << std::endl;
    std::cout << std::endl;

    /*
     * РЕКОМЕНДАЦИИ ПО ИСПОЛЬЗОВАНИЮ ОПЕРАТОРА ЗАПЯТОЙ
     * 
     * Практические советы для безопасного использования
     */
    std::cout << "=== РЕКОМЕНДАЦИИ ===" << std::endl;
    std::cout << "1. Используйте оператор запятой осторожно - он может снижать читаемость" << std::endl;
    std::cout << "2. Предпочитайте явные операторы для сложных вычислений" << std::endl;
    std::cout << "3. Используйте в циклах for для множественных операций" << std::endl;
    std::cout << "4. Избегайте сложных выражений с побочными эффектами" << std::endl;
    std::cout << "5. Документируйте сложные выражения с оператором запятой" << std::endl;
    std::cout << "6. Рассмотрите альтернативы для лучшей читаемости" << std::endl;
    std::cout << "7. Помните: результат = значение правого операнда" << std::endl;
    std::cout << std::endl;
    
    return 0;
}

/*
 * РЕЗЮМЕ: ОПЕРАТОР ЗАПЯТОЙ В C++
 * 
 * 1. ОСНОВНЫЕ ПОНЯТИЯ:
 *    - Оператор запятой (,) объединяет выражения
 *    - Выражения выполняются слева направо
 *    - Результат = значение правого операнда
 * 
 * 2. СИНТАКСИС:
 *    - (выражение1, выражение2, выражение3)
 *    - Все выражения выполняются, результат = выражение3
 *    - Приоритет: очень низкий (ниже присваивания)
 * 
 * 3. ПОРЯДОК ВЫПОЛНЕНИЯ:
 *    - Слева направо
 *    - Все выражения выполняются
 *    - Побочные эффекты сохраняются
 *    - Результат = последнее выражение
 * 
 * 4. ПРАКТИЧЕСКИЕ ПРИМЕНЕНИЯ:
 *    - Циклы for с множественными операциями
 *    - Объединение простых операций
 *    - Условные выражения с побочными эффектами
 *    - Инициализация нескольких переменных
 * 
 * 5. ПРЕИМУЩЕСТВА:
 *    - Компактность кода
 *    - Возможность выполнить несколько операций
 *    - Удобство в циклах for
 *    - Гибкость в выражениях
 * 
 * 6. НЕДОСТАТКИ:
 *    - Может снижать читаемость
 *    - Сложность отладки
 *    - Потенциальные ошибки
 *    - Неочевидное поведение
 * 
 * 7. РЕКОМЕНДАЦИИ:
 *    - Используйте осторожно
 *    - Предпочитайте явные операторы
 *    - Документируйте сложные выражения
 *    - Рассмотрите альтернативы
 *    - Тестируйте тщательно
 * 
 * 8. ВАЖНЫЕ ЗАМЕЧАНИЯ:
 *    - Не путайте с разделителем в объявлениях
 *    - Приоритет ниже присваивания
 *    - Все выражения выполняются
 *    - Побочные эффекты сохраняются
 * 
 * 9. АЛЬТЕРНАТИВЫ:
 *    - Отдельные операторы
 *    - Функции для сложной логики
 *    - Временные переменные
 *    - Более явные конструкции
 * 
 * 10. ДОПОЛНИТЕЛЬНЫЕ ВОЗМОЖНОСТИ:
 *     - Использование в шаблонах
 *     - SFINAE (Substitution Failure Is Not An Error)
 *     - Fold expressions (C++17)
 *     - Structured bindings (C++17)
 */